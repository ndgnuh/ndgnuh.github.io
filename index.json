[
{
	"uri": "https://ndgnuh.github.io/",
	"title": "#Rant",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ndgnuh.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ndgnuh.github.io/categories/h%C6%B0%E1%BB%9Bng-d%E1%BA%ABn/",
	"title": "hướng dẫn",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ndgnuh.github.io/tags/julia/",
	"title": "julia",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ndgnuh.github.io/series/julia-dojo/",
	"title": "Julia Dojo",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ndgnuh.github.io/julia-dojo/hello-world/",
	"title": "Julia Dojo: hello world",
	"tags": ["julia"],
	"categories": [],
	"series": ["Julia Dojo"],
	"description": "Viết chương trình đầu tiên của bạn trong Julia",
	"content": "Chào mừng các bạn quay trở lại với series Julia Dojo. Hôm nay chúng ta sẽ học cách viết một chương trình trong Julia và làm thế nào để chạy nó.\nDân gian ta có câu:\n Lời chào cao hơn mâm cỗ\n\u0026ndash; Dân Gian Ta (mình cũng không biết đây là thằng nào)\n Lời chào rất quan trọng, trong lĩnh vực lập trình điều này không phải ngoại lệ. Do đó, hôm nay chúng ta sẽ viết chương trình \u0026ldquo;chào thế giới\u0026rdquo;, dân-gian-ta còn gọi là \u0026ldquo;hello world\u0026rdquo;.\nChương trình đầu tiên của bạn Hello world là chương trình rất quen thuộc nếu bạn đã học lập trình trước đây. Nó sẽ cho bạn cái nhìn đầu tiên về cấu trúc ngữ pháp của một ngôn ngữ lập trình. Đầu tiên, hãy mở một trình sửa văn bản, tạo một file tên hello-world.jl.\nTrước đây, đuôi file .j được sử dụng cho ngôn ngữ Julia. Sau này, họ đổi thành .jl, cá nhân mình thấy thích cái đuôi file này hơn.\nKhi tạo file xong, hãy điền nội dung sau vào file:\n1  println(\u0026#34;helloworld\u0026#34;)   Xong, bạn hãy mở một terminal tại vị trí bạn lưu file trên, sau đó chạy lệnh.\n1  julia hello-world.jl   Dòng chữ \u0026ldquo;hello world\u0026rdquo; sẽ được in ra màn hình. Vậy là bạn đã viết và chạy thành công chương trình hello world của mình với Julia.\nRất nhiều cách để nói \u0026ldquo;hello world\u0026rdquo; Chúng ta sẽ chỉnh sửa chương trình hello world một chút. Ở trên mình dùng hàm println để in ra chuỗi hello world. Giờ mình sẽ giới thiệu một vài cách khác:\n1 2 3 4 5 6  println(\u0026#34;helloworld\u0026#34;) print(\u0026#34;helloworld\u0026#34;); println() @show \u0026#34;helloworld\u0026#34; @info \u0026#34;helloworld\u0026#34; @warn \u0026#34;helloworld\u0026#34; @error \u0026#34;helloworld\u0026#34;   Chạy file trên, chúng ta sẽ thu được output:\nhello world hello world \u0026quot;hello world\u0026quot; = \u0026quot;hello world\u0026quot; [ Info: hello world ┌ Warning: hello world └ @ Main /tmp/hello-world.jl:6 ┌ Error: hello world └ @ Main /tmp/hello-world.jl:7  Dòng đầu là kết quả của println, hàm này sẽ in ra tham số của nó, sau đó in kí tự ngắt dòng. Dòng thứ hai là kết quả của print, hàm này giống println nhưng không in kí tự ngắt dòng, do đó mình phải thêm một hàm println() trống ở phía sau. Các bạn để ý thêm. Ở dòng số 2 file hello-world.jl, mình có dấu ;. Đấu này không cần thiết khi bạn viết mỗi lệnh trên một dòng. Tuy nhiên nếu bạn cần viết hai lệnh trên cùng dòng thì sẽ cần tới nó để ngắt giữa hai lệnh. Ở dòng 3, macro @show in ra một điều \u0026ldquo;hiển nhiên\u0026rdquo;: \u0026quot;hello world\u0026quot; = \u0026quot;hello world\u0026quot;. Thực ra, cái này dùng để show ra giá trị của một biến hay hằng số, ở đây chúng ta truyền cho nó một hằng số nên nó in ra củ chuối như vậy\u0026hellip; Macro là gì ư? Tạm thời bạn đừng quan tâm, hãy tạm hiểu nó có dấu @ và làm một cái gì đó cho bạn. Ở dòng 4, chúng ta có @info. Macro này có tính ghi chú, nó chỉ nhận đầu vào là chuỗi kí tự thôi. @info được dùng để đưa ra bản ghi chép (log) cho chương trình của bạn. Ở dòng 5, chúng ta có @warn. Thằng này giống thằng @info, nhưng nó nói với giọng \u0026ldquo;bố đang cảnh báo mày đấy\u0026rdquo;. Tuy hổ báo nhưng nó sẽ không đừng việc thực thi chương trình của bạn. @warn thường được dùng khi một người viết gói chương trình muốn deprecate (tạm dịch là cho lỗi thời, mình không biết dịch như nào cho hay) một tính năng nào đó và cảnh báo người dùng không nên dùng nó. Cuối cùng, chúng ta có @error. Thằng này nó sẽ cảnh báo và cho chương trình của bạn bay màu luôn. @error được dùng rất nhiều. Bạn sẽ gặp nó khi gọi một hàm không tồn tại chẳng hạn.  Chế độ tương tác Bạn có thấy viết hẳn một file, chỉ dành cho một dòng code mà in ra hello world có hơi thừa? Nếu vậy hãy mở terminal ra, chạy câu lệnh sau:\n1  julia   Chế độ tương tác Julia (hay Julia REPL) sẽ chào đón bạn với một cái logo ascii (không có mèo đâu, đấy là hình nền của mình :P)\n chế độ tương tác Julia   Bạn có thể chạy \u0026ldquo;hello world\u0026rdquo; bằng cách nhập câu lệnh trên vào và nhấn Enter:\n hello world trong một dòng   Thậm chí bạn có thể gõ ?println và xem thông tin về những thứ mình vừa viết ở trên.\n chế độ help   Goodbye, world Ok, vậy là bạn đã biết những cách đơn giản nhất viết và chạy chương trình Julia (và cũng là chương trình đơn giản nhất luôn). Chúng ta sẽ lần lượt tìm hiểu những phương thức khác trong các bài tiếp theo. Riêng với chế độ tương tác, mình có thể làm một bài nữa, nói về những tính năng của nó. Hẹn gặp lại các bạn trong những bài viết sau :)\n"
},
{
	"uri": "https://ndgnuh.github.io/categories/l%E1%BA%ADp-tr%C3%ACnh/",
	"title": "lập trình",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ndgnuh.github.io/posts/",
	"title": "Posts",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ndgnuh.github.io/series/",
	"title": "Series",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ndgnuh.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ndgnuh.github.io/julia-dojo/cai-dat-julia/",
	"title": "Julia Dojo: cài đặt Julia",
	"tags": ["julia"],
	"categories": [],
	"series": ["Julia Dojo"],
	"description": "Hướng dẫn tải và cài đặt Julia trên máy tính của bạn",
	"content": "Chào mừng các bạn đến với bài viết đầu tiên của series \u0026ldquo;Julia từ con số không\u0026rdquo;. Trong bài viết này mình sẽ hướng dẫn các bạn cách cài đặt Julia.\nĐể cài Julia, chúng ta có 2 cách:\n Cài đặt từ bản phân phối chính thức: cách này được khuyến cáo vì nó sẽ không gây lỗi lặt vặt, tuy nhiên quá trình cài đặt sẽ hơi dài một chút. Cài đặt từ bản phân phối của cộng đồng: cách này rất đơn giản, đặc biệt với những bạn dùng Linux. Tuy nhiên cách này có thể gây lỗi vặt (thực ra mình mới chỉ thấy một lỗi trên ArchLinux, chưa thấy có người gửi issue nào khác)  Mình sẽ hướng dẫn các bạn cả hai cách. Việc cài đặt có thể sử dụng tới terminal (dòng lệnh, hiểu nôm na là vậy), vậy có kiến thức cơ bản về việc sử dụng terminal và shell có thể sẽ hữu dụng và giúp quá trình cài đặt dễ dàng hơn. Nếu bạn không biết những thứ này cũng không nên lo quá.\nCài đặt bản phân phối từ cộng đồng Vì cách này ngắn và đơn giản hơn, mình sẽ hướng dẫn trước. Để thực hiện cách cài đặt này, bạn cần có package manager. Cái này trên *Nix thì có chắc chắn có sẵn, còn trên MacOS và Windows có lẽ bạn sẽ phải cài thêm. Khi xong xuôi, bạn chỉ cần mở terminal và ehạy lệnh tương ứng với hệ điều hành của mình:\n  Windows - Chocolately  Cài đặt:\n1  choco install julia --confirm   Cập nhật:\n1  choco upgrade julia --confirm        MacOs - HomeBrew  HomeBrew trên Mac 1  brew cask install julia        Fedora/Red hat/Cent OS và các distro tương tự  Với Fedora bản 19 hoặc hơn:\n1 2  sudo dnf copr enable nalimilan/julia sudo yum install julia   Nếu bạn dùng Cent OS bản 7 hoặc hơn:\n1 2  sudo yum-config-manager –add-repo https://copr.fedorainfracloud.org/coprs/nalimilan/julia/repo/epel-7/nalimilan-julia-epel-7.repo sudo yum install julia   Nếu dnf và yum-config-manager không khả dụng trên hệ thống của bạn, hãy tải file .repo tương ứng ở link phía trên và copy vào /etc/yum.repos, sau đó chạy câu lệnh thứ 2.\nĐể cập nhật Julia:\n1  yum upgrade julia        Debian/Ubuntu và các distro tương tự  Cài đặt:\n1 2  sudo apt update sudo apt install julia   Cập nhật:\n1 2  sudo apt update sudo apt upgrade        Archlinux và các distro tương tự  Cài đặt:\n1 2 3 4  sudo pacman -S julia # bản không chính thức # những bản này cần `yay` để cài tự động sudo yay -S julia-bin # tương ứng với bản chính thức từ trang chủ yay -S julia-git # tương ứng vởi bản build từ git   Cập nhật:\n1 2 3  sudo pacman -Syu # hoặc yay -Syu      Cài đặt từ bản phân phối chính thức Việc cài đặt sẽ chia thành ba bước. Đầu tiên, bạn cần truy cập trang tải về của Julia để lấy bản phân phối chính thức. Mình sẽ hướng dẫn chi tiết quá trình cài đặt. Bước tiếp theo là giải nế và cài đặt. Cuối cùng, chúng ta sẽ cài đặt biến môi trường để có thể truy cập vào Julia mọi lúc mọi nơi.\nTải Julia  Trang download Julia   Julia cung cấp một số lựa chọn:\n Current stable release: phiên bản ổn định. Bản Release Candidate: phiên bản ứng cứ viên phát hành, có thể hiểu là \u0026ldquo;gần\u0026rdquo; ổn định.. Long-term support: Phiên bản hỗ trợ lâu dài, bạn có thể hiểu đây là phiên bạn \u0026ldquo;cực kì ổn định\u0026rdquo;. Bản Nightly: Bản thử nghiệm, dành cho những thanh niên thích thử nghiệm.  Sau khi đã quyết định sẽ sử dụng phiên bản nào, hãy tải về bản cài đặt phù hợp với hệ điều hành của bạn. Ví dụ nếu mình dùng Windows 64 bit hãy tải file Windows (.exe) ở cột 64-bit (trong ảnh).\nGiải nén và cài đặt   Windows  Sau khi tải Julia như trên, chúng ta sẽ có một file .exe. Mở file exe này lên. Việc cài đặt tương đối đơn giản, chỉ cần next, next và next.\nLưu ý rằng, quá trình cài đặt có một bước chọn đường dẫn giải nén. Hãy lưu lại đường dẫn này để sử dụng ở bước sau.\n    MacOS  Sau khi tải Julia như trên, chúng ta sẽ có một file .dmg. Mở file .dmg ấy, bên trong có file Julia-\u0026lt;phiên-bản\u0026gt;.app. Kéo thả file này vào thư mục Application trên desktop của bạn và bạn đã hoàn thành bước này.     Linux, BSD, *Nix  Sau khi tải Julia như trên, chúng ta sẽ có một file .tar.gz. Hãy copy file này vào vị trí cài đặt tương ứng, sau đó giải nén file này ra bằng lệnh:\n1  tar -xvf đường/dẫn/tới/\u0026lt;file-của-bạn\u0026gt;.tar.gz   Một vài file, thư mục mới sẽ xuất hiện, vậy là bạn đã hoàn thành bước này.\n  Thêm đường dẫn đến Julia vào biến môi trường Để có thể gọi Julia từ mọi nơi, bạn cần thêm đường dẫn tới file thực thi Julia vào biến $PATH. Tuy cả ba nhóm hệ điều hành trên đều dùng biến môi trường này, cách cài đặt sẽ khác nhau một chút.\n  Windows 10   Nhấn tổ hợp phím Windows + R, gõ sysdm.cpl và nhấn Enter Một cửa sổ hiện lên, hãy chọn thẻ Advanced, chọn Environment Variables. Thêm một cửa sổ nữa hiện lên, trong phần System variables, chọn Path và click vào nút Edit Một cửa sổ hiện ra, nhấn New. Một cửa sổ mới hiện ra với một hộp văn bản Lấy đường dẫn cài đặt ở bước 2 ra, thêm \\bin vào đuôi và copy vô cái hộp văn bản đó. Ví dụ mình cài Julia vào E:\\julia, mình sẽ ghi E:\\julia\\bin. Ấn Ok, tắt hết các hộp thoại, giờ bạn đã cài xong Julia.      Windows khác   Nhấn tổ hợp phím Windows + R, gõ sysdm.cpl và nhấn Enter Một cửa sổ hiện lên, hãy chọn thẻ Advanced, chọn Environment Variables. Thêm một cửa sổ nữa hiện lên, trong phần System variables, chọn Path và click vào nút Edit Sau khi nhấn Edit, sẽ có một cửa sổ với 2 hộp văn bản xuất hiện. Click vào hộp văn bản thứ 2 (Variable value:) và di chuyển đến cuối dòng, nếu cuối dòng không có dấu ; hãy thêm dấu ; vào. Lấy đường dẫn cài đặt ở bước 2 ra, thêm \\bin vào đuôi và copy thêm vào cuối của hộp văn bản thứ 2. Ví dụ mình cài Julia vào E:\\julia, mình sẽ ghi thêm E:\\julia\\bin vào cuối. Nhắc lại rất kĩ là ghi thêm nhé, ông nào paste đè lên cái cũ xong hỏng máy tôi không chịu trách nhiệm đâu. Ấn Ok, tắt hết các hộp thoại, giờ bạn đã cài xong Julia.      MacOS   Chạy open -a TextEdit ~/.bash_profile trên Terminal. Nếu bạn dùng zsh thì thay .bash_profile bằng .zshrc (nếu bạn không biết bạn đang dùng cái gì thì đừng để ý đoạn zsh này). Lệnh trên sẽ mở file ~/.bash_profile để bạn chỉnh sửa. Thêm dòng export PATH=\u0026quot;/Applications/Julia-.app/Contents/Resources/julia/bin:${PATH}\u0026quot; vào cuối và save lại.      Linux, BSD, *Nix  Bạn có 3 lựa chọn như dưới đây, sau khi thực hiện một trong ba bạn sẽ có thể sử dụng Julia.\n Thêm thư mục Julia vào biến $PATH bằng cách thêm dòng lệnh mình ghi ở dưới vào trong file ~/.bashrc và ~/.bash_profile. Thay hai file trên với ~/.zshrc nếu bạn dùng zsh. Thay những file trên với /etc/profile, /etc/bash.bashrc hoặc /etc/zsh nếu bạn muốn cài đặt trên toàn hệ thống.  1  export PATH=\u0026#34;$PATH:/đường/dẫn/tới/\u0026lt;julia dir\u0026gt;/bin\u0026#34;    Chạy lệnh echo $PATH xem biến $PATH của bạn có những thư mục nào, ví dụ mình sẽ chọn /usr/bin. Sau đó, hãy tạo liên kết tới Julia trong thư mục đó bằng lệnh sudo ln -s /đường/dẫn/tới/\u0026lt;julia dir\u0026gt;/bin/julia /usr/bin/ (mình dùng sudo vì cần quyền ghi vào /usr/bin, nếu người dùng của bạn ghi được vào thư mục trên $PATH thì không cần sudo) Cách cục súc: bạn sẽ chạy /đường/dẫn/tới/\u0026lt;julia dir\u0026gt;/bin/julia mỗi lần bạn dùng đến nó.    Lưu ý thêm cho những bạn dùng Windows   Nếu bạn dùng Windows 7   bản update này sẽ giúp trình quản lý gói của Julia hoạt động. Xuống phần Method 2 và click vào link Microsoft Update Catalog. Windows Management Framework 3.0 hoặc hơn để cài Powershell. Vào trang web trên, kéo xuống dưới cái bảng và click vào phiên bản bạn muốn download.    Nhìn chung, nếu bạn dùng Windows, mình khuyên các bạn nên tìm một terminal khác ngoài cmd và cái đi kèm với Powershell. Một số gợi ý cho các bạn:\n Terminal của Visual Studio Code Git bash  Tổng kết Các bạn có thể cài đặt Julia theo cách mình muốn. Bản cài chính thức cài đặt sẽ dài dòng hơn một chút nhưng đảm bảo hơn, bản cài do cộng đồng phân phối sẽ tiện lợi hơn với một tỉ lệ rất rất nhỏ xảy ra bug. Để kiểm tra việc cài đặt Julia có thành công hay không, hãy mở Terminal và chạy lệnh julia.\n Nếu lệnh chạy thành công, chúng ta sẽ thấy màn hình Julia chào đón mình  \n"
},
{
	"uri": "https://ndgnuh.github.io/julia-dojo/",
	"title": "Julia Dojo: giới thiệu",
	"tags": ["julia"],
	"categories": [],
	"series": ["Julia Dojo"],
	"description": "",
	"content": "Julia? Julia là một ngôn ngữ lập trình bậc cao dễ sử dụng, nhanh và mạnh mẽ. Một số đặc trưng của Julia cũng như lí do bạn sẽ muốn dùng nó (hoặc không):\n Julia là một ngôn ngữ lập trình hàm Kiểu động (dynamic typing) Julia được biên dịch (compile), tuy nhiên cũng có chế độ thông dịch (intepreter) nếu bạn muốn Julia nhanh Cú pháp rất dễ chịu, những bạn nào quen dùng python hoặc matlab sẽ thấy quen thuộc Cực kì mạnh, thư viện tiêu chuẩn hỗ trợ rất tốt việc tính toán toán học và xử lý song song. Multiple dispatch (cái này có thể khiến bạn cảm giác lạ lạ, nhưng nó đỉnh lắm) Julia miễn phí và mã nguồn mở (giấy phép MIT) Julia hứa hẹn sẽ giải quyết vấn đề hai ngôn ngữ  Khoan, nhiều \u0026ldquo;điểm tốt\u0026rdquo; quá, nghe vô lý. Thằng Python bậc cao nhưng nó chậm như rùa, mọi thư viện đều phải binding và viết với C. Thằng C thì nhanh, nhưng mà để viết được nó thì không phải ông nào cũng làm được. Thằng Matlab thì nhanh và dễ viết thật, nhưng bạn ơi, tiền đâu mà dùng Matlab, ngồi crack thôi chứ còn gì. Hơn nữa, Matlab nếu bạn dùng cho mục đích cá nhân thì crack được, chứ một tổ chức hay cơ quan thì họ sẽ bảo rằng:\n Ở đây chúng tôi không làm vậy\n\u0026ndash; Họ không dùng Matlab ở Wakanda\n Ok, mình vẫn chưa giải thích tại sao có nhiều \u0026ldquo;điểm tốt\u0026rdquo; như vậy. Julia đạt được những điều như trên vì 2 lí do:\n Julia dùng Just Intime Compiler (JIT) Việc biên dịch của Julia cực kì phức tạp, khiến cho mã Julia khi dịch xong có tốc độ so sánh được với C hoặc Fortran   Micro benchmark theo thời gian chạy một số ngôn ngữ, thời gian chạy của C được lấy làm mốc. Các ngôn ngữ khác được so sánh tương đối.   Đương nhiên, Julia cũng có khiếm khuyết, không có cái gì hoàn hảo cả. Và cộng đồng cũng rất cố gắng để cải thiện, xử lý chúng.\n Cộng đồng Julia nhỏ một cách tương đối so với những \u0026ldquo;ông lớn\u0026rdquo; như Python, đặc biệt là cộng đồng người Việt. Mình cho rằng đây là vấn đề thời gian, và vấn đề này cũng là lí do mình ở đây, viết cái đống này cho các bạn :). Mảng trong Julia đánh chỉ số từ 1. Có thể bạn đang nghĩ rằng sẽ dừng đọc và drop cái ngôn ngữ của nợ này ngay tại đây, hãy khoan đã. Theo mình thấy, vấn đề chỉ số này không ảnh hưởng nhiều lắm. Việc đánh chỉ số từ 0 được ông Dijikstra đưa ra và áp dụng trong kha khá ngôn ngữ lập trình, nhưng vẫn có những người dám phản dmg ông và đi theo trường phái khác. Cá nhân mình không có thành kiến gì với cả hai trường phái đâu, mình chỉ muốn nói cả hai đều có thể dùng được. Lí do duy nhất mình đưa cái này vào khuyết điểm vì có thể nó sẽ \u0026ldquo;dọa\u0026rdquo; những người mới.   Tôi không biết bao nhiêu người trong số các ông đã đích thân gặp Dijikstra, nhưng các ông chắc đều biết rằng - sự kiêu ngạo trong tính toán khoa học được đo bằng nano-Dijikstra.\n\u0026ndash; Alan Kay (mình không biết ông này nhưng mà câu nói của ổng làm mình thấy khoái)\n Lần đầu chạy code sẽ lâu hơn một chút. Ví dụ khi mình tạo random 100000 số kiểu double, lần đầu chạy rand(Float64, 100000) sẽ mất khoảng 0.06, những lần tiêp theo thời gian sẽ giảm đi còn 0.002 (nhanh gấp khoảng 30 lần). Có lẽ đây là vấn đề lớn nhất trong Julia. Nếu bạn hiểu JIT là cái gì, bạn sẽ thấy đặc điểm này gần như không thể tránh được. Tuy nhiên, với những người định \u0026ldquo;dùng thử\u0026rdquo; Julia, họ sẽ trải nghiệm thời gian compile và tưởng nó là runtime, sau đó sẽ nghĩ rằng \u0026ldquo;cái này không nhanh như quảng cáo\u0026rdquo;. Điều này ảnh hưởng rất nhiều tới khuyết điểm số 1. Hiện tại, cộng đồng Julia đang rất ưu tiên giải quyết vấn đề này, họ đã tìm cách giảm thời gian compile đáng kể, đồng thời có cách để compile hoàn toàn mã nguồn Julia dưới dạng thư viện liên kết động. Scala là cái tên được ghép từ \u0026ldquo;scalable\u0026rdquo; và \u0026ldquo;language\u0026rdquo;. Swift mang nghĩa chuyển động trơn tru và tốc độ cao. Ruby là một viên đá quý. C++ là C tăng lên 1 level. C là kế tiếp của B. Matlab là viết tắt của Matrix Laboratory, thậm chí trong một ngôn ngữ nào đó, nó có nghĩa là sự thông thái\u0026hellip; Vậy Julia cái tên Julia thì sao, nó có ý nghĩa gì?   Đây là câu hỏi ưa thích của mọi người. Thực ra chả có lí do gì đâu, nghe cái tên nó hay hay.\n\u0026ndash; Stefan Karpinski =))\n Huyên thuyên về Julia đủ rồi. Rất tiếc nếu mình không thuyết phục được bạn. Tuy nhiên, nếu bạn quyết định thử Julia và cho nó một cơ hội, hãy chuyển qua phần tiếp theo và bước vào Julia Dojo.\nJulia Dojo Vậy là bạn quyết định cho Julia một cơ hội, mình sẽ cảm ơn các bạn bằng một series hướng dẫn \u0026amp; thảo luận, mang tên \u0026ldquo;Julia Dojo\u0026rdquo;. Series này sẽ tổng hợp từ rất nhiều nguồn kiến thức, nhưng chủ yếu mình sẽ lấy từ 3 nguồn:\n Tài liệu chính thức Julia Con (một hội thảo được tổ chức hàng năm) Hiểu biết của mình  Với tài liệu chính thức và Julia Con, bạn có thể xem một cách miễn phí trên mạng nếu nếu không ngại tiếng Anh; còn cái nguồn thứ ba, bạn có thể xem nếu bạn quen mình ngoài đời thực và có khả năng ngoại cảm.\nÝ tưởng chính của Julia Dojo là: chúng ta sẽ train từng level một. Với mỗi level chúng ta sẽ đi sâu vào trong hệ thống của Julia hơn và thấy các thứ liên kết với nhau như thế nào. Trang này sẽ là nơi mình update các level của Dojo cùng với nội dung trong đó mỗi khi có bài mới.\nLevel 1: nhập môn  Tải và cài đặt Julia Hello, world  Tạm kết Fun fact: \u0026ldquo;Julia\u0026rdquo; nghe rất giống tên của một phụ nữ trong nhiều nền văn hóa, do đó, dù quy chuẩn của cộng đồng cho rằng Julia không dựa trên tên của ai và ngôn ngữ này không được nhân hóa dưới bất kì hình thức nào, một cơ số người khi nói về ngôn ngữ này vẫn vô thức dùng đại từ \u0026ldquo;cô ấy\u0026rdquo;, trong đó có cả mình :)) Ok, mình nghĩ đến đây là đủ cho bài giới thiệu. Chắc các bạn cũng đoán ra được rằng, mình đang muốn mở rộng cộng đồng người dùng Julia, cụ thể hơn là ở Việt Nam. Một lần nữa, nếu bạn quyết định cho Julia một cơ hội, mình xin cảm ơn. Mình sẽ cố viết post chất lượng và giải đáp thắc mắc của các bạn.\n"
},
{
	"uri": "https://ndgnuh.github.io/about/",
	"title": "Giới thiệu",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": "whoami? Xin chào mọi người, mình là Hùng, một open source enthusiast, và là một sinh viên.\nWhat am I doing here? Blog này dự kiến sẽ dùng để chia sẻ kiến thức và bàn chuyện trên trời dưới đất. Cụ thể hơn, mình sẽ chia sẻ hiểu biết của mình (chủ yếu) về Linux, lập trình và có thể là một ít toán nữa.\nHiện tại mình blog chưa được implement tính năng bình luận, tạm thời các bạn đọc nếu có thắc mắc, ý kiến đóng góp hay ném gạch chịu khó gửi một email hay để lại một issue trên Github cho mình.\n Email: ndgnuh@protonmail.com Repo github cho trang này: https://github.com/ndgnuh/ndgnuh.github.io  Blog viết bởi một sinh viên, do tác giả còn rất nhiều thứ phải học nên khả năng cao sẽ gặp sai sót. Nếu bạn đọc phát hiện ra lỗi gì, về kĩ thuật, nội dung, câu cú hay lỗi chính tả ₍•⌣•₎ của trang cứ thoải mái đóng góp ý kiến nhé. "
},
{
	"uri": "https://ndgnuh.github.io/year-all-rights-reserved/",
	"title": "©{Year}, All Rights Reserved",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
}]